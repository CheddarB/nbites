// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class TestMessage;
class TestMessage_NestedTestMessage;

enum TestMessage_TestEnum {
  TestMessage_TestEnum_TEST_ENUM_0 = 0,
  TestMessage_TestEnum_TEST_ENUM_1 = 1,
  TestMessage_TestEnum_TEST_ENUM_2 = 2
};
bool TestMessage_TestEnum_IsValid(int value);
const TestMessage_TestEnum TestMessage_TestEnum_TestEnum_MIN = TestMessage_TestEnum_TEST_ENUM_0;
const TestMessage_TestEnum TestMessage_TestEnum_TestEnum_MAX = TestMessage_TestEnum_TEST_ENUM_2;
const int TestMessage_TestEnum_TestEnum_ARRAYSIZE = TestMessage_TestEnum_TestEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestMessage_TestEnum_descriptor();
inline const ::std::string& TestMessage_TestEnum_Name(TestMessage_TestEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestMessage_TestEnum_descriptor(), value);
}
inline bool TestMessage_TestEnum_Parse(
    const ::std::string& name, TestMessage_TestEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestMessage_TestEnum>(
    TestMessage_TestEnum_descriptor(), name, value);
}
// ===================================================================

class TestMessage_NestedTestMessage : public ::google::protobuf::Message {
 public:
  TestMessage_NestedTestMessage();
  virtual ~TestMessage_NestedTestMessage();
  
  TestMessage_NestedTestMessage(const TestMessage_NestedTestMessage& from);
  
  inline TestMessage_NestedTestMessage& operator=(const TestMessage_NestedTestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage_NestedTestMessage& default_instance();
  
  void Swap(TestMessage_NestedTestMessage* other);
  
  // implements Message ----------------------------------------------
  
  TestMessage_NestedTestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage_NestedTestMessage& from);
  void MergeFrom(const TestMessage_NestedTestMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .TestMessage.TestEnum type = 1 [default = TEST_ENUM_0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::TestMessage_TestEnum type() const;
  inline void set_type(::TestMessage_TestEnum value);
  
  // @@protoc_insertion_point(class_scope:TestMessage.NestedTestMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessage_NestedTestMessage* default_instance_;
};
// -------------------------------------------------------------------

class TestMessage : public ::google::protobuf::Message {
 public:
  TestMessage();
  virtual ~TestMessage();
  
  TestMessage(const TestMessage& from);
  
  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();
  
  void Swap(TestMessage* other);
  
  // implements Message ----------------------------------------------
  
  TestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TestMessage_NestedTestMessage NestedTestMessage;
  
  typedef TestMessage_TestEnum TestEnum;
  static const TestEnum TEST_ENUM_0 = TestMessage_TestEnum_TEST_ENUM_0;
  static const TestEnum TEST_ENUM_1 = TestMessage_TestEnum_TEST_ENUM_1;
  static const TestEnum TEST_ENUM_2 = TestMessage_TestEnum_TEST_ENUM_2;
  static inline bool TestEnum_IsValid(int value) {
    return TestMessage_TestEnum_IsValid(value);
  }
  static const TestEnum TestEnum_MIN =
    TestMessage_TestEnum_TestEnum_MIN;
  static const TestEnum TestEnum_MAX =
    TestMessage_TestEnum_TestEnum_MAX;
  static const int TestEnum_ARRAYSIZE =
    TestMessage_TestEnum_TestEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TestEnum_descriptor() {
    return TestMessage_TestEnum_descriptor();
  }
  static inline const ::std::string& TestEnum_Name(TestEnum value) {
    return TestMessage_TestEnum_Name(value);
  }
  static inline bool TestEnum_Parse(const ::std::string& name,
      TestEnum* value) {
    return TestMessage_TestEnum_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string string_test = 1;
  inline bool has_string_test() const;
  inline void clear_string_test();
  static const int kStringTestFieldNumber = 1;
  inline const ::std::string& string_test() const;
  inline void set_string_test(const ::std::string& value);
  inline void set_string_test(const char* value);
  inline void set_string_test(const char* value, size_t size);
  inline ::std::string* mutable_string_test();
  inline ::std::string* release_string_test();
  
  // required bytes bytes_test = 2;
  inline bool has_bytes_test() const;
  inline void clear_bytes_test();
  static const int kBytesTestFieldNumber = 2;
  inline const ::std::string& bytes_test() const;
  inline void set_bytes_test(const ::std::string& value);
  inline void set_bytes_test(const char* value);
  inline void set_bytes_test(const void* value, size_t size);
  inline ::std::string* mutable_bytes_test();
  inline ::std::string* release_bytes_test();
  
  // required int32 int32_test = 3;
  inline bool has_int32_test() const;
  inline void clear_int32_test();
  static const int kInt32TestFieldNumber = 3;
  inline ::google::protobuf::int32 int32_test() const;
  inline void set_int32_test(::google::protobuf::int32 value);
  
  // required float float_test = 4;
  inline bool has_float_test() const;
  inline void clear_float_test();
  static const int kFloatTestFieldNumber = 4;
  inline float float_test() const;
  inline void set_float_test(float value);
  
  // repeated .TestMessage.NestedTestMessage nestedTestMessages = 5;
  inline int nestedtestmessages_size() const;
  inline void clear_nestedtestmessages();
  static const int kNestedTestMessagesFieldNumber = 5;
  inline const ::TestMessage_NestedTestMessage& nestedtestmessages(int index) const;
  inline ::TestMessage_NestedTestMessage* mutable_nestedtestmessages(int index);
  inline ::TestMessage_NestedTestMessage* add_nestedtestmessages();
  inline const ::google::protobuf::RepeatedPtrField< ::TestMessage_NestedTestMessage >&
      nestedtestmessages() const;
  inline ::google::protobuf::RepeatedPtrField< ::TestMessage_NestedTestMessage >*
      mutable_nestedtestmessages();
  
  // @@protoc_insertion_point(class_scope:TestMessage)
 private:
  inline void set_has_string_test();
  inline void clear_has_string_test();
  inline void set_has_bytes_test();
  inline void clear_has_bytes_test();
  inline void set_has_int32_test();
  inline void clear_has_int32_test();
  inline void set_has_float_test();
  inline void clear_has_float_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* string_test_;
  ::std::string* bytes_test_;
  ::google::protobuf::int32 int32_test_;
  float float_test_;
  ::google::protobuf::RepeatedPtrField< ::TestMessage_NestedTestMessage > nestedtestmessages_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TestMessage_NestedTestMessage

// optional .TestMessage.TestEnum type = 1 [default = TEST_ENUM_0];
inline bool TestMessage_NestedTestMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage_NestedTestMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage_NestedTestMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage_NestedTestMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::TestMessage_TestEnum TestMessage_NestedTestMessage::type() const {
  return static_cast< ::TestMessage_TestEnum >(type_);
}
inline void TestMessage_NestedTestMessage::set_type(::TestMessage_TestEnum value) {
  GOOGLE_DCHECK(::TestMessage_TestEnum_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TestMessage

// required string string_test = 1;
inline bool TestMessage::has_string_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_string_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_string_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_string_test() {
  if (string_test_ != &::google::protobuf::internal::kEmptyString) {
    string_test_->clear();
  }
  clear_has_string_test();
}
inline const ::std::string& TestMessage::string_test() const {
  return *string_test_;
}
inline void TestMessage::set_string_test(const ::std::string& value) {
  set_has_string_test();
  if (string_test_ == &::google::protobuf::internal::kEmptyString) {
    string_test_ = new ::std::string;
  }
  string_test_->assign(value);
}
inline void TestMessage::set_string_test(const char* value) {
  set_has_string_test();
  if (string_test_ == &::google::protobuf::internal::kEmptyString) {
    string_test_ = new ::std::string;
  }
  string_test_->assign(value);
}
inline void TestMessage::set_string_test(const char* value, size_t size) {
  set_has_string_test();
  if (string_test_ == &::google::protobuf::internal::kEmptyString) {
    string_test_ = new ::std::string;
  }
  string_test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessage::mutable_string_test() {
  set_has_string_test();
  if (string_test_ == &::google::protobuf::internal::kEmptyString) {
    string_test_ = new ::std::string;
  }
  return string_test_;
}
inline ::std::string* TestMessage::release_string_test() {
  clear_has_string_test();
  if (string_test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_test_;
    string_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes bytes_test = 2;
inline bool TestMessage::has_bytes_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMessage::set_has_bytes_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMessage::clear_has_bytes_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMessage::clear_bytes_test() {
  if (bytes_test_ != &::google::protobuf::internal::kEmptyString) {
    bytes_test_->clear();
  }
  clear_has_bytes_test();
}
inline const ::std::string& TestMessage::bytes_test() const {
  return *bytes_test_;
}
inline void TestMessage::set_bytes_test(const ::std::string& value) {
  set_has_bytes_test();
  if (bytes_test_ == &::google::protobuf::internal::kEmptyString) {
    bytes_test_ = new ::std::string;
  }
  bytes_test_->assign(value);
}
inline void TestMessage::set_bytes_test(const char* value) {
  set_has_bytes_test();
  if (bytes_test_ == &::google::protobuf::internal::kEmptyString) {
    bytes_test_ = new ::std::string;
  }
  bytes_test_->assign(value);
}
inline void TestMessage::set_bytes_test(const void* value, size_t size) {
  set_has_bytes_test();
  if (bytes_test_ == &::google::protobuf::internal::kEmptyString) {
    bytes_test_ = new ::std::string;
  }
  bytes_test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessage::mutable_bytes_test() {
  set_has_bytes_test();
  if (bytes_test_ == &::google::protobuf::internal::kEmptyString) {
    bytes_test_ = new ::std::string;
  }
  return bytes_test_;
}
inline ::std::string* TestMessage::release_bytes_test() {
  clear_has_bytes_test();
  if (bytes_test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_test_;
    bytes_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 int32_test = 3;
inline bool TestMessage::has_int32_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestMessage::set_has_int32_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestMessage::clear_has_int32_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestMessage::clear_int32_test() {
  int32_test_ = 0;
  clear_has_int32_test();
}
inline ::google::protobuf::int32 TestMessage::int32_test() const {
  return int32_test_;
}
inline void TestMessage::set_int32_test(::google::protobuf::int32 value) {
  set_has_int32_test();
  int32_test_ = value;
}

// required float float_test = 4;
inline bool TestMessage::has_float_test() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestMessage::set_has_float_test() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestMessage::clear_has_float_test() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestMessage::clear_float_test() {
  float_test_ = 0;
  clear_has_float_test();
}
inline float TestMessage::float_test() const {
  return float_test_;
}
inline void TestMessage::set_float_test(float value) {
  set_has_float_test();
  float_test_ = value;
}

// repeated .TestMessage.NestedTestMessage nestedTestMessages = 5;
inline int TestMessage::nestedtestmessages_size() const {
  return nestedtestmessages_.size();
}
inline void TestMessage::clear_nestedtestmessages() {
  nestedtestmessages_.Clear();
}
inline const ::TestMessage_NestedTestMessage& TestMessage::nestedtestmessages(int index) const {
  return nestedtestmessages_.Get(index);
}
inline ::TestMessage_NestedTestMessage* TestMessage::mutable_nestedtestmessages(int index) {
  return nestedtestmessages_.Mutable(index);
}
inline ::TestMessage_NestedTestMessage* TestMessage::add_nestedtestmessages() {
  return nestedtestmessages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TestMessage_NestedTestMessage >&
TestMessage::nestedtestmessages() const {
  return nestedtestmessages_;
}
inline ::google::protobuf::RepeatedPtrField< ::TestMessage_NestedTestMessage >*
TestMessage::mutable_nestedtestmessages() {
  return &nestedtestmessages_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TestMessage_TestEnum>() {
  return ::TestMessage_TestEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
