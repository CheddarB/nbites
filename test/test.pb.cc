// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_NestedTestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_NestedTestMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestMessage_TestEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  TestMessage_descriptor_ = file->message_type(0);
  static const int TestMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, string_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, bytes_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, int32_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, float_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, nestedtestmessages_),
  };
  TestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessage));
  TestMessage_NestedTestMessage_descriptor_ = TestMessage_descriptor_->nested_type(0);
  static const int TestMessage_NestedTestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage_NestedTestMessage, type_),
  };
  TestMessage_NestedTestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessage_NestedTestMessage_descriptor_,
      TestMessage_NestedTestMessage::default_instance_,
      TestMessage_NestedTestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage_NestedTestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage_NestedTestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessage_NestedTestMessage));
  TestMessage_TestEnum_descriptor_ = TestMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessage_descriptor_, &TestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessage_NestedTestMessage_descriptor_, &TestMessage_NestedTestMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete TestMessage::default_instance_;
  delete TestMessage_reflection_;
  delete TestMessage_NestedTestMessage::default_instance_;
  delete TestMessage_NestedTestMessage_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\"\240\002\n\013TestMessage\022\023\n\013string_t"
    "est\030\001 \002(\t\022\022\n\nbytes_test\030\002 \002(\014\022\022\n\nint32_t"
    "est\030\003 \002(\005\022\022\n\nfloat_test\030\004 \002(\002\022:\n\022nestedT"
    "estMessages\030\005 \003(\0132\036.TestMessage.NestedTe"
    "stMessage\032E\n\021NestedTestMessage\0220\n\004type\030\001"
    " \001(\0162\025.TestMessage.TestEnum:\013TEST_ENUM_0"
    "\"=\n\010TestEnum\022\017\n\013TEST_ENUM_0\020\000\022\017\n\013TEST_EN"
    "UM_1\020\001\022\017\n\013TEST_ENUM_2\020\002", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  TestMessage::default_instance_ = new TestMessage();
  TestMessage_NestedTestMessage::default_instance_ = new TestMessage_NestedTestMessage();
  TestMessage::default_instance_->InitAsDefaultInstance();
  TestMessage_NestedTestMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* TestMessage_TestEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_TestEnum_descriptor_;
}
bool TestMessage_TestEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TestMessage_TestEnum TestMessage::TEST_ENUM_0;
const TestMessage_TestEnum TestMessage::TEST_ENUM_1;
const TestMessage_TestEnum TestMessage::TEST_ENUM_2;
const TestMessage_TestEnum TestMessage::TestEnum_MIN;
const TestMessage_TestEnum TestMessage::TestEnum_MAX;
const int TestMessage::TestEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TestMessage_NestedTestMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

TestMessage_NestedTestMessage::TestMessage_NestedTestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMessage_NestedTestMessage::InitAsDefaultInstance() {
}

TestMessage_NestedTestMessage::TestMessage_NestedTestMessage(const TestMessage_NestedTestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMessage_NestedTestMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessage_NestedTestMessage::~TestMessage_NestedTestMessage() {
  SharedDtor();
}

void TestMessage_NestedTestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestMessage_NestedTestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage_NestedTestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_NestedTestMessage_descriptor_;
}

const TestMessage_NestedTestMessage& TestMessage_NestedTestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

TestMessage_NestedTestMessage* TestMessage_NestedTestMessage::default_instance_ = NULL;

TestMessage_NestedTestMessage* TestMessage_NestedTestMessage::New() const {
  return new TestMessage_NestedTestMessage;
}

void TestMessage_NestedTestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessage_NestedTestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TestMessage.TestEnum type = 1 [default = TEST_ENUM_0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TestMessage_TestEnum_IsValid(value)) {
            set_type(static_cast< ::TestMessage_TestEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessage_NestedTestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TestMessage.TestEnum type = 1 [default = TEST_ENUM_0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessage_NestedTestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TestMessage.TestEnum type = 1 [default = TEST_ENUM_0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessage_NestedTestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TestMessage.TestEnum type = 1 [default = TEST_ENUM_0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage_NestedTestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessage_NestedTestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessage_NestedTestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessage_NestedTestMessage::MergeFrom(const TestMessage_NestedTestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessage_NestedTestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage_NestedTestMessage::CopyFrom(const TestMessage_NestedTestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_NestedTestMessage::IsInitialized() const {
  
  return true;
}

void TestMessage_NestedTestMessage::Swap(TestMessage_NestedTestMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessage_NestedTestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_NestedTestMessage_descriptor_;
  metadata.reflection = TestMessage_NestedTestMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestMessage::kStringTestFieldNumber;
const int TestMessage::kBytesTestFieldNumber;
const int TestMessage::kInt32TestFieldNumber;
const int TestMessage::kFloatTestFieldNumber;
const int TestMessage::kNestedTestMessagesFieldNumber;
#endif  // !_MSC_VER

TestMessage::TestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMessage::InitAsDefaultInstance() {
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMessage::SharedCtor() {
  _cached_size_ = 0;
  string_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bytes_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int32_test_ = 0;
  float_test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessage::~TestMessage() {
  SharedDtor();
}

void TestMessage::SharedDtor() {
  if (string_test_ != &::google::protobuf::internal::kEmptyString) {
    delete string_test_;
  }
  if (bytes_test_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_test_;
  }
  if (this != default_instance_) {
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New() const {
  return new TestMessage;
}

void TestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_test()) {
      if (string_test_ != &::google::protobuf::internal::kEmptyString) {
        string_test_->clear();
      }
    }
    if (has_bytes_test()) {
      if (bytes_test_ != &::google::protobuf::internal::kEmptyString) {
        bytes_test_->clear();
      }
    }
    int32_test_ = 0;
    float_test_ = 0;
  }
  nestedtestmessages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string string_test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_test()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_test().data(), this->string_test().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bytes_test;
        break;
      }
      
      // required bytes bytes_test = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_test()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int32_test;
        break;
      }
      
      // required int32 int32_test = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_test_)));
          set_has_int32_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_float_test;
        break;
      }
      
      // required float float_test = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_test_)));
          set_has_float_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nestedTestMessages;
        break;
      }
      
      // repeated .TestMessage.NestedTestMessage nestedTestMessages = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nestedTestMessages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nestedtestmessages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nestedTestMessages;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string string_test = 1;
  if (has_string_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_test().data(), this->string_test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_test(), output);
  }
  
  // required bytes bytes_test = 2;
  if (has_bytes_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bytes_test(), output);
  }
  
  // required int32 int32_test = 3;
  if (has_int32_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_test(), output);
  }
  
  // required float float_test = 4;
  if (has_float_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_test(), output);
  }
  
  // repeated .TestMessage.NestedTestMessage nestedTestMessages = 5;
  for (int i = 0; i < this->nestedtestmessages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nestedtestmessages(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string string_test = 1;
  if (has_string_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_test().data(), this->string_test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_test(), target);
  }
  
  // required bytes bytes_test = 2;
  if (has_bytes_test()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes_test(), target);
  }
  
  // required int32 int32_test = 3;
  if (has_int32_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_test(), target);
  }
  
  // required float float_test = 4;
  if (has_float_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_test(), target);
  }
  
  // repeated .TestMessage.NestedTestMessage nestedTestMessages = 5;
  for (int i = 0; i < this->nestedtestmessages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nestedtestmessages(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string string_test = 1;
    if (has_string_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_test());
    }
    
    // required bytes bytes_test = 2;
    if (has_bytes_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_test());
    }
    
    // required int32 int32_test = 3;
    if (has_int32_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_test());
    }
    
    // required float float_test = 4;
    if (has_float_test()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .TestMessage.NestedTestMessage nestedTestMessages = 5;
  total_size += 1 * this->nestedtestmessages_size();
  for (int i = 0; i < this->nestedtestmessages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nestedtestmessages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  nestedtestmessages_.MergeFrom(from.nestedtestmessages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_test()) {
      set_string_test(from.string_test());
    }
    if (from.has_bytes_test()) {
      set_bytes_test(from.bytes_test());
    }
    if (from.has_int32_test()) {
      set_int32_test(from.int32_test());
    }
    if (from.has_float_test()) {
      set_float_test(from.float_test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other != this) {
    std::swap(string_test_, other->string_test_);
    std::swap(bytes_test_, other->bytes_test_);
    std::swap(int32_test_, other->int32_test_);
    std::swap(float_test_, other->float_test_);
    nestedtestmessages_.Swap(&other->nestedtestmessages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
